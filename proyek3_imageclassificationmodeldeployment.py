# -*- coding: utf-8 -*-
"""Proyek3_ImageClassificationModelDeployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HH3HXfpN1Wr-r50rnWOc4i6KEoiKFtYD

Arindita Prihastama | 1494037162100-370 | arinditap@gmail.com
"""

! pip install -q kaggle
from google.colab import files
files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d muratkokludataset/rice-image-dataset

import os, zipfile

dir = '../content/rice-image-dataset.zip'
zipFile = zipfile.ZipFile(dir, 'r')
zipFile.extractall('../content/RiceDataset')
zipFile.close()

file_dir = '../content/RiceDataset/Rice_Image_Dataset/'

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale = 1.0/255,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.2,
    fill_mode = 'nearest',
    validation_split = 0.2
)

val_datagen = ImageDataGenerator(
    rescale = 1.0/255,
    validation_split = 0.2
)

train_generator = train_datagen.flow_from_directory(
    file_dir,
    target_size = (150, 150),
    batch_size = 64,
    class_mode = 'categorical',
    subset = 'training'
)

val_generator = val_datagen.flow_from_directory(
    file_dir,
    target_size = (150, 150),
    batch_size = 64,
    class_mode = 'categorical',
    subset = 'validation'
)

import tensorflow as tf

from keras.models import Sequential
from keras.layers import Flatten, Dense, Conv2D, MaxPooling2D, Dropout, BatchNormalization

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (5,5), padding = 'Same', activation = 'relu', input_shape = (150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Conv2D(32, (3, 3), padding = 'Same', activation = 'relu'),
    tf.keras.layers.MaxPooling2D(pool_size = (2,2), strides = (2,2)),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Conv2D(64, (3,3), padding = 'Same', activation = 'relu'),
    tf.keras.layers.MaxPooling2D(pool_size = (2, 2), strides=(2, 2)),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation = 'relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(5, activation = 'softmax')
])

model.compile(
    optimizer = 'adam',
    loss = 'categorical_crossentropy',
    metrics = ['accuracy']
)

from keras.callbacks import Callback, EarlyStopping

class TargetCallback(Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') >= 0.95 and logs.get('val_accuracy') >= 0.95):
      print("\n Accuracy and Validtion Accuracy has reached 95%! Training Stopped")
      self.model.stop_training = True
Target = TargetCallback()

EarlyStop = EarlyStopping(
    monitor = 'val_loss',
    min_delta = 0.0001,
    patience = 5,
    verbose = 1,
    mode = 'auto'
)

History = model.fit(
    train_generator,
    epochs = 100,
    validation_data = val_generator,
    callbacks = [Target, EarlyStop],
    verbose = 1
)

import matplotlib.pyplot as plt

plt.plot(History.history['accuracy'])
plt.plot(History.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='lower right')

plt.plot(History.history['loss'])
plt.plot(History.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper right')

import pathlib

export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('RiceClassification.tflite')
tflite_model_file.write_bytes(tflite_model)

